<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on My New Hugo Site</title>
    <link>http://example.org/</link>
    <description>Recent content in Introduction on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://example.org/docs/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/gmp%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/gmp%E6%A8%A1%E5%9E%8B/</guid>
      <description>G的大小: 2-4k
线程的大小 M?
1、我们通过 go func () 来创建一个 goroutine；
2、有两个存储 G 的队列，一个是局部调度器 P 的本地队列、一个是全局 G 队列。新创建的 G 会先保存在 P 的本地队列中，如果 P 的本地队列已经满了就会保存在全局的队列中；
3、G 只能运行在 M 中，一个 M 必须持有一个 P，M 与 P 是 1：1 的关系。M 会从 P 的本地队列弹出一个可执行状态的 G 来执行，如果 P 的本地队列为空，就会想其他的 MP 组合偷取一个可执行的 G 来执行；
4、一个 M 调度 G 执行的过程是一个循环机制；
5、当 M 执行某一个 G 时候如果发生了 syscall 或则其余阻塞操作，M 会阻塞，如果当前有一些 G 在执行，runtime 会把这个线程 M 从 P 中摘除 (detach)，然后再创建一个新的操作系统的线程 (如果有空闲的线程可用就复用空闲线程) 来服务于这个 P；</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84/</guid>
      <description>1 反射使用 # 1.1 反射获取数据类型 # 通过relfect.TypeOf() 获取对应的类型,这个方法可以返回类型元数据信息,
Name方法返回类型对应的名字,如果是slice类型或者是指针类型,返回为空字符串 Kind方法对应的数据类型,int、string、struct、func,枚举值reflect.Kind类型 Size: 数据占用内存大小,单位字节 &amp;hellip; type Type interface { ... Name() string // 返回类型对应的名字 PkgPath() string // 类型所在路径 Kind() Kind // 类型元数据的所属类型,int32、float32、string、slice、map、struct、ptr... Elem() Type // 数组、切片、chan、map、指针类型存储的数据信息,其他类型会panic Field(i int) StructField // 返回sturct的某个字段元数据信息 ... } type Foo struct { Name string `tag1:&amp;#34;First Tag&amp;#34; tag2:&amp;#34;Second Tag&amp;#34;` Age int `json:&amp;#34;age&amp;#34;` } func main() { testCase := []interface{}{ 1, &amp;#34;1&amp;#34;, []string{&amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;}, map[int]int{1: 1, 2: 2}, Foo{ Name: &amp;#34;foo&amp;#34;, Age: 12, }, ioutil.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/java%E5%9F%BA%E7%A1%80/jvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/java%E5%9F%BA%E7%A1%80/jvm/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/java%E5%9F%BA%E7%A1%80/lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/java%E5%9F%BA%E7%A1%80/lambda/</guid>
      <description> Optional # Optional用法:
无法判断被调用传递过来的list 是否为空, 可以省略if null的判断条件
List&amp;lt;String&amp;gt; carsFiltered = Optional.ofNullable(cars) .orElseGet(Collections::emptyList) .stream() .filter(Objects::nonNull) //filtering car object that are null .map(Car::getName) //now it&amp;#39;s a stream of Strings .filter(Objects::nonNull) //filtering null in Strings .filter(name -&amp;gt; name.startsWith(&amp;#34;M&amp;#34;)) .collect(Collectors.toList()); //back to List of Strings </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/java%E5%9F%BA%E7%A1%80/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/java%E5%9F%BA%E7%A1%80/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhosue/sql-join/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhosue/sql-join/</guid>
      <description>clickhouse
常用操作
join # 所有的join 操作基本范式都是
​	table1 join table2 on table.xxx=table2.xxx
​	join table3 on table1.xxx=table3.xxx
​	join table4 on table2.xxx=table4.xxx
不允许先查询 再进行join,错误查询示例
select * from table_a where age=12 (inner) join table_b on table_a.id =table_b.id left joni table_c on table a.id=table_c.id where table_a.name=&amp;#39;xxxx&amp;#34; (innser)join操作 # ​	内连接,去两个表on 交集
select * from table_a (inner) join table_b on table_a.id =table_b.id where table_a.name=&amp;#39;&amp;#39;xxxx&amp;#34; ​
Left join # 左边为空时,会导致不会查到任何数据
左连接,取左表所有
select * from table_a left join table_b on table_a.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhosue/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E8%B0%83%E4%BC%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhosue/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E8%B0%83%E4%BC%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhosue/%E7%89%A9%E5%8C%96%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhosue/%E7%89%A9%E5%8C%96%E8%A7%86%E5%9B%BE/</guid>
      <description>物化视图相关功能</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhosue/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhosue/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/</guid>
      <description>system.clusters表 # 作用: 查询系统的集群信息
system.query_log # 系统日志:
system.parts # 系统表:根据此表可以查询表的分区信息,以及占用的空间大小
SELECT TABLE, -- 表名 DATABASE, -- 数据库名 max(partition) AS part, -- 最大分区 formatReadableSize(sum(bytes_on_disk)) AS SIZE, -- 磁盘容量 sum(bytes_on_disk) AS size_bytes -- 磁盘容量 FROM system.parts_all GROUP BY TABLE, DATABASE ORDER BY size_bytes DESC system.disks # 查询磁盘使用率
SELECT sum(total_space -free_space)/sum(total_space) AS USAGE, -- 使用率 count(*) , -- 节点数量 formatReadableSize(sum(total_space -free_space)) AS foramat_usage, -- 使用空间大小 formatReadableSize(sum(total_space)) AS format_total --总空间大小 FROM clusterAllReplicas(&amp;#39;clickhouse_pcg_video_data_science_2_replica&amp;#39;,system,disks); 数据导出命令 # mysql -h{host} -u{user}-P{port} -D{db} --password=&amp;#39;{passwod}&amp;#39; -e &amp;#34;sql&amp;#34; &amp;gt; file.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/elasticsearch/%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/elasticsearch/%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/elasticsearch/%E8%B0%83%E4%BC%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/elasticsearch/%E8%B0%83%E4%BC%98/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mvcc%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mvcc%E6%A8%A1%E5%9E%8B/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E4%BA%8B%E5%8A%A1/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E6%9E%B6%E6%9E%84/</guid>
      <description>redis 架构 # 持久化方式 # rdb: fork进程
aof: 一个线程,
一致性hash: # 一致哈希 是一种特殊的哈希算法。在使用一致哈希算法后，哈希表槽位数（大小）的改变平均只需要对 K/n 个关键字重新映射，其中 K 是关键字的数量，n 是槽位数量。然而在传统的哈希表中，添加或删除一个槽位的几乎需要对所有关键字进行重新映射。
多级缓存: # 缓存更新、缓存一致性问题
key&amp;mdash;key&amp;mdash;&amp;gt;value形式 还是key-value形式</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E4%BF%A1%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E4%BF%A1%E6%9E%B6%E6%9E%84/</guid>
      <description>微信架构</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description>贪心算法定义</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E7%AE%97%E6%B3%95/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E7%AE%97%E6%B3%95/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/menu/</guid>
      <description> headless: true # </description>
    </item>
    
  </channel>
</rss>
