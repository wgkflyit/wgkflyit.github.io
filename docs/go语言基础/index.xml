<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go语言基础 on My New Hugo Site</title>
    <link>http://example.org/docs/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in go语言基础 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="http://example.org/docs/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://example.org/docs/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/gmp%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/gmp%E6%A8%A1%E5%9E%8B/</guid>
      <description>G的大小: 2-4k
线程的大小 M?
1、我们通过 go func () 来创建一个 goroutine；
2、有两个存储 G 的队列，一个是局部调度器 P 的本地队列、一个是全局 G 队列。新创建的 G 会先保存在 P 的本地队列中，如果 P 的本地队列已经满了就会保存在全局的队列中；
3、G 只能运行在 M 中，一个 M 必须持有一个 P，M 与 P 是 1：1 的关系。M 会从 P 的本地队列弹出一个可执行状态的 G 来执行，如果 P 的本地队列为空，就会想其他的 MP 组合偷取一个可执行的 G 来执行；
4、一个 M 调度 G 执行的过程是一个循环机制；
5、当 M 执行某一个 G 时候如果发生了 syscall 或则其余阻塞操作，M 会阻塞，如果当前有一些 G 在执行，runtime 会把这个线程 M 从 P 中摘除 (detach)，然后再创建一个新的操作系统的线程 (如果有空闲的线程可用就复用空闲线程) 来服务于这个 P；</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84/</guid>
      <description>1 反射使用 # 1.1 反射获取数据类型 # 通过relfect.TypeOf() 获取对应的类型,这个方法可以返回类型元数据信息,
Name方法返回类型对应的名字,如果是slice类型或者是指针类型,返回为空字符串 Kind方法对应的数据类型,int、string、struct、func,枚举值reflect.Kind类型 Size: 数据占用内存大小,单位字节 &amp;hellip; type Type interface { ... Name() string // 返回类型对应的名字 PkgPath() string // 类型所在路径 Kind() Kind // 类型元数据的所属类型,int32、float32、string、slice、map、struct、ptr... Elem() Type // 数组、切片、chan、map、指针类型存储的数据信息,其他类型会panic Field(i int) StructField // 返回sturct的某个字段元数据信息 ... } type Foo struct { Name string `tag1:&amp;#34;First Tag&amp;#34; tag2:&amp;#34;Second Tag&amp;#34;` Age int `json:&amp;#34;age&amp;#34;` } func main() { testCase := []interface{}{ 1, &amp;#34;1&amp;#34;, []string{&amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;}, map[int]int{1: 1, 2: 2}, Foo{ Name: &amp;#34;foo&amp;#34;, Age: 12, }, ioutil.</description>
    </item>
    
  </channel>
</rss>
